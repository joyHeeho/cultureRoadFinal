<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.culture.user.comment.dao.CommentDAO">
<!-- 쿼리문 참조!!
private int mv_co_num = 0; 						//한줄평 번호
	private int mv_id = 0; 						//영화 아이디(코드)
	private String mv_co_content = ""; 			// 댓글 내용
	private String mv_co_write_date = ""; 		// 댓글 작성일
	private int mv_co_ratings = 0; 				// 댓글 점수
	private int mv_co_hidden = 0; 				// 댓글 숨김
	private int mv_co_red = 0; 					// 댓글 신고
	private int user_no = 0; 					// 사용자 번호
	private String userName = "";				// 사용자명
}
	
	<collection property="images" column="m_num" ofType="image" javaType="java.util.ArrayList" 
	select="com.spring.client.multiple.dao.ImageDao.imageList"></collection>
	오늘 이거 참조해서 댓글 기능 구현해보기
 -->
	
	<!-- 댓글 전체 조회(해당 영화아이디에 대해) -->
	<select id="commentList" parameterType="userComment" resultType="userComment">
		select mv_co_num, id, user_name, title, mv_co_content,to_char(mv_co_write_date,'YYYY-MM-DD HH24:MI:SS') as mv_co_write_date
		FROM MOVIECOMMENT
		where id = #{id}
		order by mv_co_num desc
	</select>
	
	<!-- 댓글 등록 -->
	<insert id="commentInsert" parameterType="userComment">
		/* comment - commentInsert */
		
		<selectKey keyProperty="mv_co_num" resultType="int" order="BEFORE">
			select MOVIECOMMENT_SEQ.nextval from dual
		</selectKey>
		insert into MOVIECOMMENT(mv_co_num, id, user_name, title, mv_co_content, mv_co_write_date)
		values (#{mv_co_num}, #{id}, #{user_name}, #{title}, #{mv_co_content}, sysdate)
	</insert>
	
<!-- 비밀번호 확인  -->
<!-- 	<select id="pwdConfirm" parameterType="reply" resultType="int"> -->
<!-- 		/* Reply - pwdConfirm */ -->
<!-- 		SELECT NVL(( -->
<!-- 						SELECT 1 FROM spring_reply -->
<!-- 						WHERE r_num = #{r_num} AND r_pwd = #{r_pwd} -->
<!-- 					), 0) as state -->
<!-- 	</select>                                                                  이건 아직 어떻게 될지 몰라서 Keep-->                                                              
	
	<!-- 댓글 수정 -->
	<update id="commentUpdate" parameterType="userComment">
		/* Reply - commentUpdate */
		UPDATE MOVIECOMMENT
		SET mv_co_content = #{mv_co_content}
		WHERE mv_co_num = #{mv_co_num}
	</update>
	
	<!-- 댓글 삭제 -->
	<delete id="commentDelete" parameterType="userComment">
		/* Reply - commentDelete */
		DELETE FROM MOVIECOMMENT
		WHERE mv_co_num = #{mv_co_num}
	</delete>
	
	<!-- 댓글 삭제 (게시글 번호로 댓글 전체 삭제 - 관리자 페이지) -->
	<delete id="commentChoiceDelete" parameterType="userComment">
		/* Reply - commentDelete */
		DELETE FROM MOVIECOMMENT
		WHERE id = #{id}
	</delete>
	
	<!-- 댓글 개수 구하기 -->
	<select id="commentCnt" parameterType="int" resultType="int">
		/* Reply - commentCnt */
		select count(mv_co_num) from MOVIECOMMENT where id = #{id}
	</select>
	
<!-- 	<update id="commentLikeCountPlus" parameterType="userComment">
		UPDATE REVIEW
		SET REVIEW_LIKE_COUNT = REVIEW_LIKE_COUNT + 1
		WHERE mv_co_num = #{mv_co_num}
	</update> -->
	
</mapper>